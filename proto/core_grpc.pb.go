// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: proto/core.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OracleServiceClient is the client API for OracleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OracleServiceClient interface {
	// GetWealthScores streams the latest wealth scores from the oracle.
	GetWealthScores(ctx context.Context, in *GetWealthScoresRequest, opts ...grpc.CallOption) (OracleService_GetWealthScoresClient, error)
}

type oracleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOracleServiceClient(cc grpc.ClientConnInterface) OracleServiceClient {
	return &oracleServiceClient{cc}
}

func (c *oracleServiceClient) GetWealthScores(ctx context.Context, in *GetWealthScoresRequest, opts ...grpc.CallOption) (OracleService_GetWealthScoresClient, error) {
	stream, err := c.cc.NewStream(ctx, &OracleService_ServiceDesc.Streams[0], "/proto.OracleService/GetWealthScores", opts...)
	if err != nil {
		return nil, err
	}
	x := &oracleServiceGetWealthScoresClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type OracleService_GetWealthScoresClient interface {
	Recv() (*WealthScoreRecord, error)
	grpc.ClientStream
}

type oracleServiceGetWealthScoresClient struct {
	grpc.ClientStream
}

func (x *oracleServiceGetWealthScoresClient) Recv() (*WealthScoreRecord, error) {
	m := new(WealthScoreRecord)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// OracleServiceServer is the server API for OracleService service.
// All implementations must embed UnimplementedOracleServiceServer
// for forward compatibility
type OracleServiceServer interface {
	// GetWealthScores streams the latest wealth scores from the oracle.
	GetWealthScores(*GetWealthScoresRequest, OracleService_GetWealthScoresServer) error
	mustEmbedUnimplementedOracleServiceServer()
}

// UnimplementedOracleServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOracleServiceServer struct {
}

func (UnimplementedOracleServiceServer) GetWealthScores(*GetWealthScoresRequest, OracleService_GetWealthScoresServer) error {
	return status.Errorf(codes.Unimplemented, "method GetWealthScores not implemented")
}
func (UnimplementedOracleServiceServer) mustEmbedUnimplementedOracleServiceServer() {}

// UnsafeOracleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OracleServiceServer will
// result in compilation errors.
type UnsafeOracleServiceServer interface {
	mustEmbedUnimplementedOracleServiceServer()
}

func RegisterOracleServiceServer(s grpc.ServiceRegistrar, srv OracleServiceServer) {
	s.RegisterService(&OracleService_ServiceDesc, srv)
}

func _OracleService_GetWealthScores_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetWealthScoresRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OracleServiceServer).GetWealthScores(m, &oracleServiceGetWealthScoresServer{stream})
}

type OracleService_GetWealthScoresServer interface {
	Send(*WealthScoreRecord) error
	grpc.ServerStream
}

type oracleServiceGetWealthScoresServer struct {
	grpc.ServerStream
}

func (x *oracleServiceGetWealthScoresServer) Send(m *WealthScoreRecord) error {
	return x.ServerStream.SendMsg(m)
}

// OracleService_ServiceDesc is the grpc.ServiceDesc for OracleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OracleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.OracleService",
	HandlerType: (*OracleServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetWealthScores",
			Handler:       _OracleService_GetWealthScores_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/core.proto",
}
