syntax = "proto3";

package proto;

import "google/protobuf/timestamp.proto";

option go_package = "github.com/empower1/blockchain/proto";

// Transaction represents a single transaction in the EmPower1 blockchain.
message Transaction {
    bytes hash = 1;
    string from = 2;
    string to = 3;
    uint64 value = 4;
    bytes data = 5;
    google.protobuf.Timestamp timestamp = 6;
}

// BlockHeader contains the metadata for a block.
message BlockHeader {
    int32 version = 1;
    bytes prev_block_hash = 2;
    bytes transactions_hash = 3; // Merkle root of the transactions
    google.protobuf.Timestamp timestamp = 4;
    uint64 height = 5;
}

// Block represents a single block in the EmPower1 blockchain.
message Block {
    bytes hash = 1;
    BlockHeader header = 2;
    repeated Transaction transactions = 3;
}

// WealthScoreRecord holds a user's wealth/needs score.
message WealthScoreRecord {
    string user_id = 1; // User's Decentralized Identifier (DID)
    double score = 2;
    google.protobuf.Timestamp updated_at = 3;
}

// GetWealthScoresRequest is the request message for the GetWealthScores RPC.
message GetWealthScoresRequest {}

// OracleService defines the gRPC service for the off-chain Wealth Oracle.
service OracleService {
    // GetWealthScores streams the latest wealth scores from the oracle.
    rpc GetWealthScores(GetWealthScoresRequest) returns (stream WealthScoreRecord);
}

// ==============================================================================
// P2P Messages
// ==============================================================================

// BlockMessage is used to send a full block over the network.
message BlockMessage {
    Block block = 1;
}

// GetStatusMessage requests the status of a peer.
message GetStatusMessage {}

// StatusMessage is the response to a GetStatusMessage.
message StatusMessage {
    uint64 height = 1;
}

// GetBlocksMessage requests a range of blocks from a peer.
message GetBlocksMessage {
    uint64 from_height = 1;
    uint64 to_height = 2;
}

// TransactionMessage is used to send a single transaction over the network.
message TransactionMessage {
    Transaction transaction = 1;
}

// Message is a top-level wrapper for all P2P messages.
// This allows for easy extension with new message types in the future.
message Message {
    oneof payload {
        BlockMessage block = 1;
        GetStatusMessage get_status = 2;
        StatusMessage status = 3;
        GetBlocksMessage get_blocks = 4;
        TransactionMessage transaction = 5;
    }
}
